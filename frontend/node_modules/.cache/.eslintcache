[{"/home/tan/flash-card/frontend/src/index.js":"1","/home/tan/flash-card/frontend/src/reportWebVitals.js":"2","/home/tan/flash-card/frontend/src/App.js":"3","/home/tan/flash-card/frontend/src/config.js":"4"},{"size":535,"mtime":1660285023964,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1660285023964,"results":"7","hashOfConfig":"6"},{"size":4672,"mtime":1660469369362,"results":"8","hashOfConfig":"6"},{"size":168,"mtime":1660408572384,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w7qjbw",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tan/flash-card/frontend/src/index.js",[],[],"/home/tan/flash-card/frontend/src/reportWebVitals.js",[],[],"/home/tan/flash-card/frontend/src/App.js",["23","24"],[],"import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Paper, Stack, TextField } from '@mui/material';\nimport MuiAlert from '@mui/material/Alert';\nimport Snackbar from '@mui/material/Snackbar';\nimport * as React from 'react';\nimport { useRef, useState } from \"react\";\nimport Draggable from 'react-draggable';\nimport { FlashcardArray } from \"react-quizlet-flashcard\";\nimport './App.css';\n\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nfunction PaperComponent(props) {\n  return (\n    <Draggable\n      handle=\"#draggable-dialog-title\"\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n    >\n      <Paper {...props} />\n    </Draggable>\n  );\n}\n\nfunction App() {\n\n  const arrayRef = useRef({})\n  const [currentNumber, setCurrentNumber] = useState(1)\n  const [openAccepted, setOpenAccpted] = useState(false);\n  const [totalScore, setTotalScore] = useState(0)\n  const [input, setInput] = useState('')\n  const [isFlip, setIsFlip] = useState(false);\n  const [wrongs, setWrongs] = useState([]);\n  const [Scores, updateScore] = useState([]);\n  const [cards, setCards] = useState([{\n      id: 1,\n      front: \"Chờ xíu nha lấy dữ liệu tí...\",\n      back: \"Đã bảo chờ rồi mà ?\"\n  }]);\n\n\n  const handleCloseAccepted = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpenAccpted(false);\n  };\n\n\n  const MySnackBar = (isAccepted) => {\n    if (isAccepted) {\n      setOpenAccpted(true);\n    }\n  }\n\n  const [openDialog, setOpenDialog] = useState(false)\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  }\n\n  const F5 = () => {window.location.reload()}\n\n  const finished = () => {\n    var temp = []\n    var sc = 0\n    for (let i = 0; i < cards.length; i++) {\n      if (Scores[i] === 0) {\n        temp.push(cards[i].back);\n      } else {\n        sc += 1\n      }\n    }\n    setTotalScore(sc);\n    setWrongs(temp);\n    setOpenDialog(true);\n  }\n\n  const handleChange = () => {\n\n    const value = cards[currentNumber - 1].back\n    if (value === input) {\n      MySnackBar(true)\n      if (currentNumber !== cards.length) {\n        arrayRef.current.nextCard()\n        setInput(\"\")\n      } else {\n        finished()\n      }\n    }\n  }\n\n  const getData = async () => {\n    const response = await fetch(\"http://127.0.0.1:8000\")\n    const result = await response.json()\n    setCards(result.cards);\n  }\n\n  React.useEffect(() => {\n    getData()\n  }, [])\n\n  React.useEffect(() => {\n    handleChange()\n  }, [input])\n\n  React.useEffect(() => {\n\n    if (isFlip) {\n      console.log(\"hehe\")\n      var temp = Scores \n      temp[currentNumber - 1] = 0\n      updateScore(temp);\n    }\n\n  }, [isFlip])\n\n  React.useEffect(() => {\n    var scores = []\n    for (let i = 1; i <= cards.length; i++) {\n      scores.push(1)\n    }\n    updateScore(scores)\n  }, [cards])\n\n  const handleNext = () => {\n    var temp = Scores \n    temp[currentNumber - 1] = 0\n    updateScore(temp)\n    if (currentNumber === cards.length) {\n      finished()\n    }\n    arrayRef.current.nextCard()\n  }\n\n  return (\n    <Stack sx={{ ml: \"35%\", mt: \"10%\", mr: \"32%\" }} spacing={2}>\n      <FlashcardArray cards={cards} \n        control={false}\n        forwardRef={arrayRef}\n        onCardChange={(index) => {\n          setCurrentNumber(index)\n        }}\n        setIsFlipped={(isPlif) => {\n            setIsFlip(isPlif)\n        }}\n      />\n      <TextField \n        id=\"outlined-basic\" \n        label=\"Answer here...\" \n        variant=\"outlined\" \n        value={input}\n        onChange={(e) => setInput(e.target.value)} />\n      <Button onClick={() => handleNext()}>Bỏ qua</Button>\n      <Dialog\n        open={openDialog}\n        onClose={handleCloseDialog}\n        PaperComponent={PaperComponent}\n        aria-labelledby=\"draggable-dialog-title\"\n      >\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n          Kết quả: {totalScore}/{cards.length} từ\n        </DialogTitle>\n        <DialogContent>\n          {wrongs.map((item) => <ul> {item} </ul>)}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={F5}> Típ tục </Button>\n          <Button autoFocus onClick={handleCloseDialog}>\n            Khum típ tục\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Snackbar open={openAccepted} autoHideDuration={2000} onClose={handleCloseAccepted} anchorOrigin={{vertical: 'bottom', horizontal: 'right'}}>\n          <Alert onClose={handleCloseAccepted} severity=\"success\" sx={{ width: '100%' }}>\n            Đúng rồi !\n          </Alert>\n        </Snackbar>\n    </Stack>\n  ); \n}\n\nexport default App;\n","/home/tan/flash-card/frontend/src/config.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":106,"column":6,"nodeType":"27","endLine":106,"endColumn":13,"suggestions":"28"},{"ruleId":"25","severity":1,"message":"29","line":117,"column":6,"nodeType":"27","endLine":117,"endColumn":14,"suggestions":"30"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'handleChange'. Either include it or remove the dependency array.","ArrayExpression",["31"],"React Hook React.useEffect has missing dependencies: 'Scores' and 'currentNumber'. Either include them or remove the dependency array.",["32"],{"desc":"33","fix":"34"},{"desc":"35","fix":"36"},"Update the dependencies array to be: [handleChange, input]",{"range":"37","text":"38"},"Update the dependencies array to be: [Scores, currentNumber, isFlip]",{"range":"39","text":"40"},[2523,2530],"[handleChange, input]",[2700,2708],"[Scores, currentNumber, isFlip]"]
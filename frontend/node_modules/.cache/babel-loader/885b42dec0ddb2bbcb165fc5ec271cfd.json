{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Client_auth, _Client_logLevel, _Client_logger, _Client_prefixUrl, _Client_timeoutMs, _Client_notionVersion, _Client_fetch, _Client_agent, _Client_userAgent;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst logging_1 = require(\"./logging\");\n\nconst errors_1 = require(\"./errors\");\n\nconst utils_1 = require(\"./utils\");\n\nconst api_endpoints_1 = require(\"./api-endpoints\");\n\nconst node_fetch_1 = require(\"node-fetch\");\n\nconst package_json_1 = require(\"../package.json\");\n\nclass Client {\n  constructor(options) {\n    var _a, _b, _c, _d, _e, _f;\n\n    _Client_auth.set(this, void 0);\n\n    _Client_logLevel.set(this, void 0);\n\n    _Client_logger.set(this, void 0);\n\n    _Client_prefixUrl.set(this, void 0);\n\n    _Client_timeoutMs.set(this, void 0);\n\n    _Client_notionVersion.set(this, void 0);\n\n    _Client_fetch.set(this, void 0);\n\n    _Client_agent.set(this, void 0);\n\n    _Client_userAgent.set(this, void 0);\n    /*\n     * Notion API endpoints\n     */\n\n\n    this.blocks = {\n      /**\n       * Retrieve block\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getBlock.path(args),\n          method: api_endpoints_1.getBlock.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.getBlock.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.getBlock.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Update block\n       */\n      update: args => {\n        return this.request({\n          path: api_endpoints_1.updateBlock.path(args),\n          method: api_endpoints_1.updateBlock.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.updateBlock.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.updateBlock.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Delete block\n       */\n      delete: args => {\n        return this.request({\n          path: api_endpoints_1.deleteBlock.path(args),\n          method: api_endpoints_1.deleteBlock.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.deleteBlock.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.deleteBlock.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      children: {\n        /**\n         * Append block children\n         */\n        append: args => {\n          return this.request({\n            path: api_endpoints_1.appendBlockChildren.path(args),\n            method: api_endpoints_1.appendBlockChildren.method,\n            query: (0, utils_1.pick)(args, api_endpoints_1.appendBlockChildren.queryParams),\n            body: (0, utils_1.pick)(args, api_endpoints_1.appendBlockChildren.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        },\n\n        /**\n         * Retrieve block children\n         */\n        list: args => {\n          return this.request({\n            path: api_endpoints_1.listBlockChildren.path(args),\n            method: api_endpoints_1.listBlockChildren.method,\n            query: (0, utils_1.pick)(args, api_endpoints_1.listBlockChildren.queryParams),\n            body: (0, utils_1.pick)(args, api_endpoints_1.listBlockChildren.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        }\n      }\n    };\n    this.databases = {\n      /**\n       * List databases\n       *\n       * @deprecated Please use `search`\n       */\n      list: args => {\n        return this.request({\n          path: api_endpoints_1.listDatabases.path(),\n          method: api_endpoints_1.listDatabases.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.listDatabases.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.listDatabases.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Retrieve a database\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getDatabase.path(args),\n          method: api_endpoints_1.getDatabase.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.getDatabase.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.getDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Query a database\n       */\n      query: args => {\n        return this.request({\n          path: api_endpoints_1.queryDatabase.path(args),\n          method: api_endpoints_1.queryDatabase.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.queryDatabase.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.queryDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Create a database\n       */\n      create: args => {\n        return this.request({\n          path: api_endpoints_1.createDatabase.path(),\n          method: api_endpoints_1.createDatabase.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.createDatabase.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.createDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Update a database\n       */\n      update: args => {\n        return this.request({\n          path: api_endpoints_1.updateDatabase.path(args),\n          method: api_endpoints_1.updateDatabase.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.updateDatabase.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.updateDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      }\n    };\n    this.pages = {\n      /**\n       * Create a page\n       */\n      create: args => {\n        return this.request({\n          path: api_endpoints_1.createPage.path(),\n          method: api_endpoints_1.createPage.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.createPage.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.createPage.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Retrieve a page\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getPage.path(args),\n          method: api_endpoints_1.getPage.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.getPage.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.getPage.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Update page properties\n       */\n      update: args => {\n        return this.request({\n          path: api_endpoints_1.updatePage.path(args),\n          method: api_endpoints_1.updatePage.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.updatePage.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.updatePage.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      properties: {\n        /**\n         * Retrieve page property\n         */\n        retrieve: args => {\n          return this.request({\n            path: api_endpoints_1.getPageProperty.path(args),\n            method: api_endpoints_1.getPageProperty.method,\n            query: (0, utils_1.pick)(args, api_endpoints_1.getPageProperty.queryParams),\n            body: (0, utils_1.pick)(args, api_endpoints_1.getPageProperty.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        }\n      }\n    };\n    this.users = {\n      /**\n       * Retrieve a user\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getUser.path(args),\n          method: api_endpoints_1.getUser.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.getUser.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.getUser.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * List all users\n       */\n      list: args => {\n        return this.request({\n          path: api_endpoints_1.listUsers.path(),\n          method: api_endpoints_1.listUsers.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.listUsers.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.listUsers.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * Get details about bot\n       */\n      me: args => {\n        return this.request({\n          path: api_endpoints_1.getSelf.path(),\n          method: api_endpoints_1.getSelf.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.getSelf.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.getSelf.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      }\n    };\n    this.comments = {\n      /**\n       * Create a comment\n       */\n      create: args => {\n        return this.request({\n          path: api_endpoints_1.createComment.path(),\n          method: api_endpoints_1.createComment.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.createComment.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.createComment.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n\n      /**\n       * List comments\n       */\n      list: args => {\n        return this.request({\n          path: api_endpoints_1.listComments.path(),\n          method: api_endpoints_1.listComments.method,\n          query: (0, utils_1.pick)(args, api_endpoints_1.listComments.queryParams),\n          body: (0, utils_1.pick)(args, api_endpoints_1.listComments.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      }\n    };\n    /**\n     * Search\n     */\n\n    this.search = args => {\n      return this.request({\n        path: api_endpoints_1.search.path(),\n        method: api_endpoints_1.search.method,\n        query: (0, utils_1.pick)(args, api_endpoints_1.search.queryParams),\n        body: (0, utils_1.pick)(args, api_endpoints_1.search.bodyParams),\n        auth: args === null || args === void 0 ? void 0 : args.auth\n      });\n    };\n\n    __classPrivateFieldSet(this, _Client_auth, options === null || options === void 0 ? void 0 : options.auth, \"f\");\n\n    __classPrivateFieldSet(this, _Client_logLevel, (_a = options === null || options === void 0 ? void 0 : options.logLevel) !== null && _a !== void 0 ? _a : logging_1.LogLevel.WARN, \"f\");\n\n    __classPrivateFieldSet(this, _Client_logger, (_b = options === null || options === void 0 ? void 0 : options.logger) !== null && _b !== void 0 ? _b : (0, logging_1.makeConsoleLogger)(package_json_1.name), \"f\");\n\n    __classPrivateFieldSet(this, _Client_prefixUrl, ((_c = options === null || options === void 0 ? void 0 : options.baseUrl) !== null && _c !== void 0 ? _c : \"https://api.notion.com\") + \"/v1/\", \"f\");\n\n    __classPrivateFieldSet(this, _Client_timeoutMs, (_d = options === null || options === void 0 ? void 0 : options.timeoutMs) !== null && _d !== void 0 ? _d : 60000, \"f\");\n\n    __classPrivateFieldSet(this, _Client_notionVersion, (_e = options === null || options === void 0 ? void 0 : options.notionVersion) !== null && _e !== void 0 ? _e : Client.defaultNotionVersion, \"f\");\n\n    __classPrivateFieldSet(this, _Client_fetch, (_f = options === null || options === void 0 ? void 0 : options.fetch) !== null && _f !== void 0 ? _f : node_fetch_1.default, \"f\");\n\n    __classPrivateFieldSet(this, _Client_agent, options === null || options === void 0 ? void 0 : options.agent, \"f\");\n\n    __classPrivateFieldSet(this, _Client_userAgent, `notionhq-client/${package_json_1.version}`, \"f\");\n  }\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n\n\n  async request(_ref) {\n    let {\n      path,\n      method,\n      query,\n      body,\n      auth\n    } = _ref;\n    this.log(logging_1.LogLevel.INFO, \"request start\", {\n      method,\n      path\n    }); // If the body is empty, don't send the body in the HTTP request\n\n    const bodyAsJsonString = !body || Object.entries(body).length === 0 ? undefined : JSON.stringify(body);\n    const url = new URL(`${__classPrivateFieldGet(this, _Client_prefixUrl, \"f\")}${path}`);\n\n    if (query) {\n      for (const [key, value] of Object.entries(query)) {\n        if (value !== undefined) {\n          url.searchParams.append(key, String(value));\n        }\n      }\n    }\n\n    const headers = { ...this.authAsHeaders(auth),\n      \"Notion-Version\": __classPrivateFieldGet(this, _Client_notionVersion, \"f\"),\n      \"user-agent\": __classPrivateFieldGet(this, _Client_userAgent, \"f\")\n    };\n\n    if (bodyAsJsonString !== undefined) {\n      headers[\"content-type\"] = \"application/json\";\n    }\n\n    try {\n      const response = await errors_1.RequestTimeoutError.rejectAfterTimeout(__classPrivateFieldGet(this, _Client_fetch, \"f\").call(this, url.toString(), {\n        method: method.toUpperCase(),\n        headers,\n        body: bodyAsJsonString,\n        agent: __classPrivateFieldGet(this, _Client_agent, \"f\")\n      }), __classPrivateFieldGet(this, _Client_timeoutMs, \"f\"));\n      const responseText = await response.text();\n\n      if (!response.ok) {\n        throw (0, errors_1.buildRequestError)(response, responseText);\n      }\n\n      const responseJson = JSON.parse(responseText);\n      this.log(logging_1.LogLevel.INFO, `request success`, {\n        method,\n        path\n      });\n      return responseJson;\n    } catch (error) {\n      if (!(0, errors_1.isNotionClientError)(error)) {\n        throw error;\n      } // Log the error if it's one of our known error types\n\n\n      this.log(logging_1.LogLevel.WARN, `request fail`, {\n        code: error.code,\n        message: error.message\n      });\n\n      if ((0, errors_1.isHTTPResponseError)(error)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(logging_1.LogLevel.DEBUG, `failed response body`, {\n          body: error.body\n        });\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n\n\n  log(level, message, extraInfo) {\n    if ((0, logging_1.logLevelSeverity)(level) >= (0, logging_1.logLevelSeverity)(__classPrivateFieldGet(this, _Client_logLevel, \"f\"))) {\n      __classPrivateFieldGet(this, _Client_logger, \"f\").call(this, level, message, extraInfo);\n    }\n  }\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n\n\n  authAsHeaders(auth) {\n    const headers = {};\n    const authHeaderValue = auth !== null && auth !== void 0 ? auth : __classPrivateFieldGet(this, _Client_auth, \"f\");\n\n    if (authHeaderValue !== undefined) {\n      headers[\"authorization\"] = `Bearer ${authHeaderValue}`;\n    }\n\n    return headers;\n  }\n\n}\n\nexports.default = Client;\n_Client_auth = new WeakMap(), _Client_logLevel = new WeakMap(), _Client_logger = new WeakMap(), _Client_prefixUrl = new WeakMap(), _Client_timeoutMs = new WeakMap(), _Client_notionVersion = new WeakMap(), _Client_fetch = new WeakMap(), _Client_agent = new WeakMap(), _Client_userAgent = new WeakMap();\nClient.defaultNotionVersion = \"2022-06-28\";","map":{"version":3,"mappings":"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","names":["Client","constructor","options","_Client_auth","_Client_logLevel","_Client_logger","_Client_prefixUrl","_Client_timeoutMs","_Client_notionVersion","_Client_fetch","_Client_agent","_Client_userAgent","retrieve","args","request","path","api_endpoints_1","method","query","queryParams","body","bodyParams","auth","update","delete","children","append","list","create","properties","me","__classPrivateFieldSet","logLevel","_a","logging_1","WARN","logger","_b","package_json_1","baseUrl","_c","timeoutMs","_d","notionVersion","_e","defaultNotionVersion","fetch","_f","node_fetch_1","agent","log","INFO","bodyAsJsonString","Object","entries","length","undefined","JSON","stringify","url","URL","__classPrivateFieldGet","key","value","searchParams","String","headers","authAsHeaders","response","errors_1","rejectAfterTimeout","call","toString","toUpperCase","responseText","text","ok","responseJson","parse","error","code","message","DEBUG","level","extraInfo","authHeaderValue","exports"],"sources":["/home/tan/flash-card/node_modules/@notionhq/client/src/Client.ts"],"sourcesContent":["import type { Agent } from \"http\"\nimport {\n  Logger,\n  LogLevel,\n  logLevelSeverity,\n  makeConsoleLogger,\n} from \"./logging\"\nimport {\n  buildRequestError,\n  isHTTPResponseError,\n  isNotionClientError,\n  RequestTimeoutError,\n} from \"./errors\"\nimport { pick } from \"./utils\"\nimport {\n  GetBlockParameters,\n  GetBlockResponse,\n  getBlock,\n  UpdateBlockParameters,\n  UpdateBlockResponse,\n  updateBlock,\n  DeleteBlockParameters,\n  DeleteBlockResponse,\n  deleteBlock,\n  AppendBlockChildrenParameters,\n  AppendBlockChildrenResponse,\n  appendBlockChildren,\n  ListBlockChildrenParameters,\n  ListBlockChildrenResponse,\n  listBlockChildren,\n  ListDatabasesParameters,\n  ListDatabasesResponse,\n  listDatabases,\n  GetDatabaseParameters,\n  GetDatabaseResponse,\n  getDatabase,\n  QueryDatabaseParameters,\n  QueryDatabaseResponse,\n  queryDatabase,\n  CreateDatabaseParameters,\n  CreateDatabaseResponse,\n  createDatabase,\n  UpdateDatabaseParameters,\n  UpdateDatabaseResponse,\n  updateDatabase,\n  CreatePageParameters,\n  CreatePageResponse,\n  createPage,\n  GetPageParameters,\n  GetPageResponse,\n  getPage,\n  UpdatePageParameters,\n  UpdatePageResponse,\n  updatePage,\n  GetUserParameters,\n  GetUserResponse,\n  getUser,\n  ListUsersParameters,\n  ListUsersResponse,\n  listUsers,\n  SearchParameters,\n  SearchResponse,\n  search,\n  GetSelfParameters,\n  GetSelfResponse,\n  getSelf,\n  GetPagePropertyParameters,\n  GetPagePropertyResponse,\n  getPageProperty,\n  CreateCommentParameters,\n  CreateCommentResponse,\n  createComment,\n  ListCommentsParameters,\n  ListCommentsResponse,\n  listComments,\n} from \"./api-endpoints\"\nimport nodeFetch from \"node-fetch\"\nimport {\n  version as PACKAGE_VERSION,\n  name as PACKAGE_NAME,\n} from \"../package.json\"\nimport { SupportedFetch } from \"./fetch-types\"\n\nexport interface ClientOptions {\n  auth?: string\n  timeoutMs?: number\n  baseUrl?: string\n  logLevel?: LogLevel\n  logger?: Logger\n  notionVersion?: string\n  fetch?: SupportedFetch\n  /** Silently ignored in the browser */\n  agent?: Agent\n}\n\nexport interface RequestParameters {\n  path: string\n  method: Method\n  query?: QueryParams\n  body?: Record<string, unknown>\n  auth?: string\n}\n\nexport default class Client {\n  #auth?: string\n  #logLevel: LogLevel\n  #logger: Logger\n  #prefixUrl: string\n  #timeoutMs: number\n  #notionVersion: string\n  #fetch: SupportedFetch\n  #agent: Agent | undefined\n  #userAgent: string\n\n  static readonly defaultNotionVersion = \"2022-06-28\"\n\n  public constructor(options?: ClientOptions) {\n    this.#auth = options?.auth\n    this.#logLevel = options?.logLevel ?? LogLevel.WARN\n    this.#logger = options?.logger ?? makeConsoleLogger(PACKAGE_NAME)\n    this.#prefixUrl = (options?.baseUrl ?? \"https://api.notion.com\") + \"/v1/\"\n    this.#timeoutMs = options?.timeoutMs ?? 60_000\n    this.#notionVersion = options?.notionVersion ?? Client.defaultNotionVersion\n    this.#fetch = options?.fetch ?? nodeFetch\n    this.#agent = options?.agent\n    this.#userAgent = `notionhq-client/${PACKAGE_VERSION}`\n  }\n\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n  public async request<ResponseBody>({\n    path,\n    method,\n    query,\n    body,\n    auth,\n  }: RequestParameters): Promise<ResponseBody> {\n    this.log(LogLevel.INFO, \"request start\", { method, path })\n\n    // If the body is empty, don't send the body in the HTTP request\n    const bodyAsJsonString =\n      !body || Object.entries(body).length === 0\n        ? undefined\n        : JSON.stringify(body)\n\n    const url = new URL(`${this.#prefixUrl}${path}`)\n    if (query) {\n      for (const [key, value] of Object.entries(query)) {\n        if (value !== undefined) {\n          url.searchParams.append(key, String(value))\n        }\n      }\n    }\n\n    const headers: Record<string, string> = {\n      ...this.authAsHeaders(auth),\n      \"Notion-Version\": this.#notionVersion,\n      \"user-agent\": this.#userAgent,\n    }\n\n    if (bodyAsJsonString !== undefined) {\n      headers[\"content-type\"] = \"application/json\"\n    }\n    try {\n      const response = await RequestTimeoutError.rejectAfterTimeout(\n        this.#fetch(url.toString(), {\n          method: method.toUpperCase(),\n          headers,\n          body: bodyAsJsonString,\n          agent: this.#agent,\n        }),\n        this.#timeoutMs\n      )\n\n      const responseText = await response.text()\n      if (!response.ok) {\n        throw buildRequestError(response, responseText)\n      }\n\n      const responseJson: ResponseBody = JSON.parse(responseText)\n      this.log(LogLevel.INFO, `request success`, { method, path })\n      return responseJson\n    } catch (error: unknown) {\n      if (!isNotionClientError(error)) {\n        throw error\n      }\n\n      // Log the error if it's one of our known error types\n      this.log(LogLevel.WARN, `request fail`, {\n        code: error.code,\n        message: error.message,\n      })\n\n      if (isHTTPResponseError(error)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(LogLevel.DEBUG, `failed response body`, {\n          body: error.body,\n        })\n      }\n\n      throw error\n    }\n  }\n\n  /*\n   * Notion API endpoints\n   */\n\n  public readonly blocks = {\n    /**\n     * Retrieve block\n     */\n    retrieve: (\n      args: WithAuth<GetBlockParameters>\n    ): Promise<GetBlockResponse> => {\n      return this.request<GetBlockResponse>({\n        path: getBlock.path(args),\n        method: getBlock.method,\n        query: pick(args, getBlock.queryParams),\n        body: pick(args, getBlock.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update block\n     */\n    update: (\n      args: WithAuth<UpdateBlockParameters>\n    ): Promise<UpdateBlockResponse> => {\n      return this.request<UpdateBlockResponse>({\n        path: updateBlock.path(args),\n        method: updateBlock.method,\n        query: pick(args, updateBlock.queryParams),\n        body: pick(args, updateBlock.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Delete block\n     */\n    delete: (\n      args: WithAuth<DeleteBlockParameters>\n    ): Promise<DeleteBlockResponse> => {\n      return this.request<DeleteBlockResponse>({\n        path: deleteBlock.path(args),\n        method: deleteBlock.method,\n        query: pick(args, deleteBlock.queryParams),\n        body: pick(args, deleteBlock.bodyParams),\n        auth: args?.auth,\n      })\n    },\n    children: {\n      /**\n       * Append block children\n       */\n      append: (\n        args: WithAuth<AppendBlockChildrenParameters>\n      ): Promise<AppendBlockChildrenResponse> => {\n        return this.request<AppendBlockChildrenResponse>({\n          path: appendBlockChildren.path(args),\n          method: appendBlockChildren.method,\n          query: pick(args, appendBlockChildren.queryParams),\n          body: pick(args, appendBlockChildren.bodyParams),\n          auth: args?.auth,\n        })\n      },\n\n      /**\n       * Retrieve block children\n       */\n      list: (\n        args: WithAuth<ListBlockChildrenParameters>\n      ): Promise<ListBlockChildrenResponse> => {\n        return this.request<ListBlockChildrenResponse>({\n          path: listBlockChildren.path(args),\n          method: listBlockChildren.method,\n          query: pick(args, listBlockChildren.queryParams),\n          body: pick(args, listBlockChildren.bodyParams),\n          auth: args?.auth,\n        })\n      },\n    },\n  }\n\n  public readonly databases = {\n    /**\n     * List databases\n     *\n     * @deprecated Please use `search`\n     */\n    list: (\n      args: WithAuth<ListDatabasesParameters>\n    ): Promise<ListDatabasesResponse> => {\n      return this.request<ListDatabasesResponse>({\n        path: listDatabases.path(),\n        method: listDatabases.method,\n        query: pick(args, listDatabases.queryParams),\n        body: pick(args, listDatabases.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Retrieve a database\n     */\n    retrieve: (\n      args: WithAuth<GetDatabaseParameters>\n    ): Promise<GetDatabaseResponse> => {\n      return this.request<GetDatabaseResponse>({\n        path: getDatabase.path(args),\n        method: getDatabase.method,\n        query: pick(args, getDatabase.queryParams),\n        body: pick(args, getDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Query a database\n     */\n    query: (\n      args: WithAuth<QueryDatabaseParameters>\n    ): Promise<QueryDatabaseResponse> => {\n      return this.request<QueryDatabaseResponse>({\n        path: queryDatabase.path(args),\n        method: queryDatabase.method,\n        query: pick(args, queryDatabase.queryParams),\n        body: pick(args, queryDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Create a database\n     */\n    create: (\n      args: WithAuth<CreateDatabaseParameters>\n    ): Promise<CreateDatabaseResponse> => {\n      return this.request<CreateDatabaseResponse>({\n        path: createDatabase.path(),\n        method: createDatabase.method,\n        query: pick(args, createDatabase.queryParams),\n        body: pick(args, createDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update a database\n     */\n    update: (\n      args: WithAuth<UpdateDatabaseParameters>\n    ): Promise<UpdateDatabaseResponse> => {\n      return this.request<UpdateDatabaseResponse>({\n        path: updateDatabase.path(args),\n        method: updateDatabase.method,\n        query: pick(args, updateDatabase.queryParams),\n        body: pick(args, updateDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  public readonly pages = {\n    /**\n     * Create a page\n     */\n    create: (\n      args: WithAuth<CreatePageParameters>\n    ): Promise<CreatePageResponse> => {\n      return this.request<CreatePageResponse>({\n        path: createPage.path(),\n        method: createPage.method,\n        query: pick(args, createPage.queryParams),\n        body: pick(args, createPage.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Retrieve a page\n     */\n    retrieve: (args: WithAuth<GetPageParameters>): Promise<GetPageResponse> => {\n      return this.request<GetPageResponse>({\n        path: getPage.path(args),\n        method: getPage.method,\n        query: pick(args, getPage.queryParams),\n        body: pick(args, getPage.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update page properties\n     */\n    update: (\n      args: WithAuth<UpdatePageParameters>\n    ): Promise<UpdatePageResponse> => {\n      return this.request<UpdatePageResponse>({\n        path: updatePage.path(args),\n        method: updatePage.method,\n        query: pick(args, updatePage.queryParams),\n        body: pick(args, updatePage.bodyParams),\n        auth: args?.auth,\n      })\n    },\n    properties: {\n      /**\n       * Retrieve page property\n       */\n      retrieve: (\n        args: WithAuth<GetPagePropertyParameters>\n      ): Promise<GetPagePropertyResponse> => {\n        return this.request<GetPagePropertyResponse>({\n          path: getPageProperty.path(args),\n          method: getPageProperty.method,\n          query: pick(args, getPageProperty.queryParams),\n          body: pick(args, getPageProperty.bodyParams),\n          auth: args?.auth,\n        })\n      },\n    },\n  }\n\n  public readonly users = {\n    /**\n     * Retrieve a user\n     */\n    retrieve: (args: WithAuth<GetUserParameters>): Promise<GetUserResponse> => {\n      return this.request<GetUserResponse>({\n        path: getUser.path(args),\n        method: getUser.method,\n        query: pick(args, getUser.queryParams),\n        body: pick(args, getUser.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * List all users\n     */\n    list: (args: WithAuth<ListUsersParameters>): Promise<ListUsersResponse> => {\n      return this.request<ListUsersResponse>({\n        path: listUsers.path(),\n        method: listUsers.method,\n        query: pick(args, listUsers.queryParams),\n        body: pick(args, listUsers.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Get details about bot\n     */\n    me: (args: WithAuth<GetSelfParameters>): Promise<GetSelfResponse> => {\n      return this.request<GetSelfResponse>({\n        path: getSelf.path(),\n        method: getSelf.method,\n        query: pick(args, getSelf.queryParams),\n        body: pick(args, getSelf.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  public readonly comments = {\n    /**\n     * Create a comment\n     */\n    create: (\n      args: WithAuth<CreateCommentParameters>\n    ): Promise<CreateCommentResponse> => {\n      return this.request<CreateCommentResponse>({\n        path: createComment.path(),\n        method: createComment.method,\n        query: pick(args, createComment.queryParams),\n        body: pick(args, createComment.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * List comments\n     */\n    list: (\n      args: WithAuth<ListCommentsParameters>\n    ): Promise<ListCommentsResponse> => {\n      return this.request<ListCommentsResponse>({\n        path: listComments.path(),\n        method: listComments.method,\n        query: pick(args, listComments.queryParams),\n        body: pick(args, listComments.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  /**\n   * Search\n   */\n  public search = (\n    args: WithAuth<SearchParameters>\n  ): Promise<SearchResponse> => {\n    return this.request<SearchResponse>({\n      path: search.path(),\n      method: search.method,\n      query: pick(args, search.queryParams),\n      body: pick(args, search.bodyParams),\n      auth: args?.auth,\n    })\n  }\n\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n  private log(\n    level: LogLevel,\n    message: string,\n    extraInfo: Record<string, unknown>\n  ) {\n    if (logLevelSeverity(level) >= logLevelSeverity(this.#logLevel)) {\n      this.#logger(level, message, extraInfo)\n    }\n  }\n\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n  private authAsHeaders(auth?: string): Record<string, string> {\n    const headers: Record<string, string> = {}\n    const authHeaderValue = auth ?? this.#auth\n    if (authHeaderValue !== undefined) {\n      headers[\"authorization\"] = `Bearer ${authHeaderValue}`\n    }\n    return headers\n  }\n}\n\n/*\n * Type aliases to support the generic request interface.\n */\ntype Method = \"get\" | \"post\" | \"patch\" | \"delete\"\ntype QueryParams = Record<string, string | number> | URLSearchParams\n\ntype WithAuth<P> = P & { auth?: string }\n"]},"metadata":{},"sourceType":"script"}